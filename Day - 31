class Solution {
public:
    int snakesAndLadders(vector<vector<int>>& board) {
        int n = board.size();
        vector<int> flattened(n * n + 1, -1); // 1-based indexing

        // Step 1: Flatten the board (handle zigzag pattern)
        int index = 1;
        bool leftToRight = true;
        for (int row = n - 1; row >= 0; --row) {
            if (leftToRight) {
                for (int col = 0; col < n; ++col)
                    flattened[index++] = board[row][col];
            } else {
                for (int col = n - 1; col >= 0; --col)
                    flattened[index++] = board[row][col];
            }
            leftToRight = !leftToRight;
        }

        // Step 2: BFS to find the shortest path
        queue<int> q;
        vector<bool> visited(n * n + 1, false);
        q.push(1);
        visited[1] = true;
        int moves = 0;

        while (!q.empty()) {
            int size = q.size();
            while (size--) {
                int curr = q.front(); q.pop();
                if (curr == n * n) return moves;
                for (int dice = 1; dice <= 6; ++dice) {
                    int next = curr + dice;
                    if (next > n * n) continue;
                    if (flattened[next] != -1)
                        next = flattened[next];
                    if (!visited[next]) {
                        visited[next] = true;
                        q.push(next);
                    }
                }
            }
            ++moves;
        }

        return -1; // If unreachable
    }
};
